//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAntiCorrupcaoClient {
    createRepository(name: string | undefined, description: string | undefined, homepage: string | undefined, private: boolean | undefined, is_template: boolean | undefined): Observable<ServiceResultOfRepositoryResponse>;
    getBranchesFromGithub(owner: string | undefined, repo: string | undefined): Observable<ServiceResultOfBranch>;
    getWebhooksFromGithub(owner: string | undefined, repo: string | undefined): Observable<ServiceResultOfWebhook>;
    createWebhook(owner: string | undefined, repo: string | undefined, postObjectWebhook_name: string | undefined, postObjectWebhook_active: boolean | undefined, postObjectWebhook_events: string[] | undefined): Observable<ServiceResultOfWebhook>;
    updateWebhook(id: number, command: UpdateWebhookCommand): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class AntiCorrupcaoClient implements IAntiCorrupcaoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createRepository(name: string | undefined, description: string | undefined, homepage: string | undefined, private: boolean | undefined, is_template: boolean | undefined): Observable<ServiceResultOfRepositoryResponse> {
        let url_ = this.baseUrl + "/api/AntiCorrupcao/repos?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (description === null)
            throw new Error("The parameter 'description' cannot be null.");
        else if (description !== undefined)
            url_ += "description=" + encodeURIComponent("" + description) + "&";
        if (homepage === null)
            throw new Error("The parameter 'homepage' cannot be null.");
        else if (homepage !== undefined)
            url_ += "homepage=" + encodeURIComponent("" + homepage) + "&";
        if (private === null)
            throw new Error("The parameter 'private' cannot be null.");
        else if (private !== undefined)
            url_ += "private=" + encodeURIComponent("" + private) + "&";
        if (is_template === null)
            throw new Error("The parameter 'is_template' cannot be null.");
        else if (is_template !== undefined)
            url_ += "is_template=" + encodeURIComponent("" + is_template) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRepository(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRepository(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServiceResultOfRepositoryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServiceResultOfRepositoryResponse>;
        }));
    }

    protected processCreateRepository(response: HttpResponseBase): Observable<ServiceResultOfRepositoryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResultOfRepositoryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getBranchesFromGithub(owner: string | undefined, repo: string | undefined): Observable<ServiceResultOfBranch> {
        let url_ = this.baseUrl + "/api/AntiCorrupcao/branches?";
        if (owner === null)
            throw new Error("The parameter 'owner' cannot be null.");
        else if (owner !== undefined)
            url_ += "Owner=" + encodeURIComponent("" + owner) + "&";
        if (repo === null)
            throw new Error("The parameter 'repo' cannot be null.");
        else if (repo !== undefined)
            url_ += "Repo=" + encodeURIComponent("" + repo) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBranchesFromGithub(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBranchesFromGithub(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServiceResultOfBranch>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServiceResultOfBranch>;
        }));
    }

    protected processGetBranchesFromGithub(response: HttpResponseBase): Observable<ServiceResultOfBranch> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResultOfBranch.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getWebhooksFromGithub(owner: string | undefined, repo: string | undefined): Observable<ServiceResultOfWebhook> {
        let url_ = this.baseUrl + "/api/AntiCorrupcao/hooks?";
        if (owner === null)
            throw new Error("The parameter 'owner' cannot be null.");
        else if (owner !== undefined)
            url_ += "Owner=" + encodeURIComponent("" + owner) + "&";
        if (repo === null)
            throw new Error("The parameter 'repo' cannot be null.");
        else if (repo !== undefined)
            url_ += "Repo=" + encodeURIComponent("" + repo) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWebhooksFromGithub(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWebhooksFromGithub(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServiceResultOfWebhook>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServiceResultOfWebhook>;
        }));
    }

    protected processGetWebhooksFromGithub(response: HttpResponseBase): Observable<ServiceResultOfWebhook> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResultOfWebhook.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createWebhook(owner: string | undefined, repo: string | undefined, postObjectWebhook_name: string | undefined, postObjectWebhook_active: boolean | undefined, postObjectWebhook_events: string[] | undefined): Observable<ServiceResultOfWebhook> {
        let url_ = this.baseUrl + "/api/AntiCorrupcao/hooks-create?";
        if (owner === null)
            throw new Error("The parameter 'owner' cannot be null.");
        else if (owner !== undefined)
            url_ += "Owner=" + encodeURIComponent("" + owner) + "&";
        if (repo === null)
            throw new Error("The parameter 'repo' cannot be null.");
        else if (repo !== undefined)
            url_ += "Repo=" + encodeURIComponent("" + repo) + "&";
        if (postObjectWebhook_name === null)
            throw new Error("The parameter 'postObjectWebhook_name' cannot be null.");
        else if (postObjectWebhook_name !== undefined)
            url_ += "PostObjectWebhook.name=" + encodeURIComponent("" + postObjectWebhook_name) + "&";
        if (postObjectWebhook_active === null)
            throw new Error("The parameter 'postObjectWebhook_active' cannot be null.");
        else if (postObjectWebhook_active !== undefined)
            url_ += "PostObjectWebhook.active=" + encodeURIComponent("" + postObjectWebhook_active) + "&";
        if (postObjectWebhook_events === null)
            throw new Error("The parameter 'postObjectWebhook_events' cannot be null.");
        else if (postObjectWebhook_events !== undefined)
            postObjectWebhook_events && postObjectWebhook_events.forEach(item => { url_ += "PostObjectWebhook.events=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateWebhook(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateWebhook(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServiceResultOfWebhook>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServiceResultOfWebhook>;
        }));
    }

    protected processCreateWebhook(response: HttpResponseBase): Observable<ServiceResultOfWebhook> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResultOfWebhook.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateWebhook(id: number, command: UpdateWebhookCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/AntiCorrupcao/hooks-update/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateWebhook(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateWebhook(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateWebhook(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }
}

export interface IBranchClient {
    getBranchsWithPagination(pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfBranchDto>;
}

@Injectable({
    providedIn: 'root'
})
export class BranchClient implements IBranchClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getBranchsWithPagination(pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfBranchDto> {
        let url_ = this.baseUrl + "/api/Branch?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBranchsWithPagination(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBranchsWithPagination(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfBranchDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfBranchDto>;
        }));
    }

    protected processGetBranchsWithPagination(response: HttpResponseBase): Observable<PaginatedListOfBranchDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfBranchDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ServiceResult implements IServiceResult {
    succeeded?: boolean;
    error?: ServiceError;

    constructor(data?: IServiceResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            this.error = _data["error"] ? ServiceError.fromJS(_data["error"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ServiceResult {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        return data;
    }
}

export interface IServiceResult {
    succeeded?: boolean;
    error?: ServiceError;
}

export class ServiceResultOfRepositoryResponse extends ServiceResult implements IServiceResultOfRepositoryResponse {
    data?: RepositoryResponse;

    constructor(data?: IServiceResultOfRepositoryResponse) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? RepositoryResponse.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ServiceResultOfRepositoryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceResultOfRepositoryResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IServiceResultOfRepositoryResponse extends IServiceResult {
    data?: RepositoryResponse;
}

export class RepositoryResponse implements IRepositoryResponse {
    id?: number;
    node_id?: string;
    name?: string;
    full_name?: string;
    fork?: boolean;
    url?: string;

    constructor(data?: IRepositoryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.node_id = _data["node_id"];
            this.name = _data["name"];
            this.full_name = _data["full_name"];
            this.fork = _data["fork"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): RepositoryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["node_id"] = this.node_id;
        data["name"] = this.name;
        data["full_name"] = this.full_name;
        data["fork"] = this.fork;
        data["url"] = this.url;
        return data;
    }
}

export interface IRepositoryResponse {
    id?: number;
    node_id?: string;
    name?: string;
    full_name?: string;
    fork?: boolean;
    url?: string;
}

export class ServiceError implements IServiceError {
    message?: string;
    code?: number;

    constructor(data?: IServiceError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ServiceError {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["code"] = this.code;
        return data;
    }
}

export interface IServiceError {
    message?: string;
    code?: number;
}

export class ServiceResultOfBranch extends ServiceResult implements IServiceResultOfBranch {
    data?: Branch;

    constructor(data?: IServiceResultOfBranch) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? Branch.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ServiceResultOfBranch {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceResultOfBranch();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IServiceResultOfBranch extends IServiceResult {
    data?: Branch;
}

export class Branch implements IBranch {
    name?: string;
    commit?: Commit;
    protected?: boolean;
    protection?: Protection;
    protection_url?: string;

    constructor(data?: IBranch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.commit = _data["commit"] ? Commit.fromJS(_data["commit"]) : <any>undefined;
            this.protected = _data["protected"];
            this.protection = _data["protection"] ? Protection.fromJS(_data["protection"]) : <any>undefined;
            this.protection_url = _data["protection_url"];
        }
    }

    static fromJS(data: any): Branch {
        data = typeof data === 'object' ? data : {};
        let result = new Branch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["commit"] = this.commit ? this.commit.toJSON() : <any>undefined;
        data["protected"] = this.protected;
        data["protection"] = this.protection ? this.protection.toJSON() : <any>undefined;
        data["protection_url"] = this.protection_url;
        return data;
    }
}

export interface IBranch {
    name?: string;
    commit?: Commit;
    protected?: boolean;
    protection?: Protection;
    protection_url?: string;
}

export class Commit implements ICommit {
    sha?: string;
    url?: string;

    constructor(data?: ICommit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sha = _data["sha"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Commit {
        data = typeof data === 'object' ? data : {};
        let result = new Commit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sha"] = this.sha;
        data["url"] = this.url;
        return data;
    }
}

export interface ICommit {
    sha?: string;
    url?: string;
}

export class Protection implements IProtection {
    enabled?: boolean;
    required_status_checks?: RequiredStatusChecks;

    constructor(data?: IProtection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enabled = _data["enabled"];
            this.required_status_checks = _data["required_status_checks"] ? RequiredStatusChecks.fromJS(_data["required_status_checks"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Protection {
        data = typeof data === 'object' ? data : {};
        let result = new Protection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enabled"] = this.enabled;
        data["required_status_checks"] = this.required_status_checks ? this.required_status_checks.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProtection {
    enabled?: boolean;
    required_status_checks?: RequiredStatusChecks;
}

export class RequiredStatusChecks implements IRequiredStatusChecks {
    enforcement_level?: string;
    contexts?: any[];
    checks?: any[];

    constructor(data?: IRequiredStatusChecks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enforcement_level = _data["enforcement_level"];
            if (Array.isArray(_data["contexts"])) {
                this.contexts = [] as any;
                for (let item of _data["contexts"])
                    this.contexts!.push(item);
            }
            if (Array.isArray(_data["checks"])) {
                this.checks = [] as any;
                for (let item of _data["checks"])
                    this.checks!.push(item);
            }
        }
    }

    static fromJS(data: any): RequiredStatusChecks {
        data = typeof data === 'object' ? data : {};
        let result = new RequiredStatusChecks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enforcement_level"] = this.enforcement_level;
        if (Array.isArray(this.contexts)) {
            data["contexts"] = [];
            for (let item of this.contexts)
                data["contexts"].push(item);
        }
        if (Array.isArray(this.checks)) {
            data["checks"] = [];
            for (let item of this.checks)
                data["checks"].push(item);
        }
        return data;
    }
}

export interface IRequiredStatusChecks {
    enforcement_level?: string;
    contexts?: any[];
    checks?: any[];
}

export class ServiceResultOfWebhook extends ServiceResult implements IServiceResultOfWebhook {
    data?: Webhook;

    constructor(data?: IServiceResultOfWebhook) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? Webhook.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ServiceResultOfWebhook {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceResultOfWebhook();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IServiceResultOfWebhook extends IServiceResult {
    data?: Webhook;
}

export class Webhook implements IWebhook {
    name?: string;
    type?: number;
    id?: number;
    active?: boolean;
    events?: Events[];
    config?: Config;
    updated_at?: string;
    created_at?: string;
    url?: string;
    test_url?: string;
    ping_url?: string;
    deliveries_url?: string;
    last_response?: LastResponse;

    constructor(data?: IWebhook) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.id = _data["id"];
            this.active = _data["active"];
            if (Array.isArray(_data["events"])) {
                this.events = [] as any;
                for (let item of _data["events"])
                    this.events!.push(Events.fromJS(item));
            }
            this.config = _data["config"] ? Config.fromJS(_data["config"]) : <any>undefined;
            this.updated_at = _data["updated_at"];
            this.created_at = _data["created_at"];
            this.url = _data["url"];
            this.test_url = _data["test_url"];
            this.ping_url = _data["ping_url"];
            this.deliveries_url = _data["deliveries_url"];
            this.last_response = _data["last_response"] ? LastResponse.fromJS(_data["last_response"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Webhook {
        data = typeof data === 'object' ? data : {};
        let result = new Webhook();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["id"] = this.id;
        data["active"] = this.active;
        if (Array.isArray(this.events)) {
            data["events"] = [];
            for (let item of this.events)
                data["events"].push(item.toJSON());
        }
        data["config"] = this.config ? this.config.toJSON() : <any>undefined;
        data["updated_at"] = this.updated_at;
        data["created_at"] = this.created_at;
        data["url"] = this.url;
        data["test_url"] = this.test_url;
        data["ping_url"] = this.ping_url;
        data["deliveries_url"] = this.deliveries_url;
        data["last_response"] = this.last_response ? this.last_response.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWebhook {
    name?: string;
    type?: number;
    id?: number;
    active?: boolean;
    events?: Events[];
    config?: Config;
    updated_at?: string;
    created_at?: string;
    url?: string;
    test_url?: string;
    ping_url?: string;
    deliveries_url?: string;
    last_response?: LastResponse;
}

export class Events implements IEvents {
    push?: number;
    pull_request?: number;

    constructor(data?: IEvents) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.push = _data["push"];
            this.pull_request = _data["pull_request"];
        }
    }

    static fromJS(data: any): Events {
        data = typeof data === 'object' ? data : {};
        let result = new Events();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["push"] = this.push;
        data["pull_request"] = this.pull_request;
        return data;
    }
}

export interface IEvents {
    push?: number;
    pull_request?: number;
}

export class Config implements IConfig {
    content_type?: string;
    insecure_ssl?: string;
    url?: string;

    constructor(data?: IConfig) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.content_type = _data["content_type"];
            this.insecure_ssl = _data["insecure_ssl"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Config {
        data = typeof data === 'object' ? data : {};
        let result = new Config();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content_type"] = this.content_type;
        data["insecure_ssl"] = this.insecure_ssl;
        data["url"] = this.url;
        return data;
    }
}

export interface IConfig {
    content_type?: string;
    insecure_ssl?: string;
    url?: string;
}

export class LastResponse implements ILastResponse {
    code?: number | undefined;
    status?: string;
    message?: string;

    constructor(data?: ILastResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.status = _data["status"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): LastResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LastResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["status"] = this.status;
        data["message"] = this.message;
        return data;
    }
}

export interface ILastResponse {
    code?: number | undefined;
    status?: string;
    message?: string;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class UpdateWebhookCommand implements IUpdateWebhookCommand {
    id?: number;
    owner?: string;
    repo?: string;
    patchObjectWebhook?: PatchObjectWebhookRequest;

    constructor(data?: IUpdateWebhookCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.owner = _data["owner"];
            this.repo = _data["repo"];
            this.patchObjectWebhook = _data["patchObjectWebhook"] ? PatchObjectWebhookRequest.fromJS(_data["patchObjectWebhook"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateWebhookCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateWebhookCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["owner"] = this.owner;
        data["repo"] = this.repo;
        data["patchObjectWebhook"] = this.patchObjectWebhook ? this.patchObjectWebhook.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUpdateWebhookCommand {
    id?: number;
    owner?: string;
    repo?: string;
    patchObjectWebhook?: PatchObjectWebhookRequest;
}

export class PatchObjectWebhookRequest implements IPatchObjectWebhookRequest {
    active?: boolean;
    add_events?: string[];

    constructor(data?: IPatchObjectWebhookRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.active = _data["active"];
            if (Array.isArray(_data["add_events"])) {
                this.add_events = [] as any;
                for (let item of _data["add_events"])
                    this.add_events!.push(item);
            }
        }
    }

    static fromJS(data: any): PatchObjectWebhookRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PatchObjectWebhookRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["active"] = this.active;
        if (Array.isArray(this.add_events)) {
            data["add_events"] = [];
            for (let item of this.add_events)
                data["add_events"].push(item);
        }
        return data;
    }
}

export interface IPatchObjectWebhookRequest {
    active?: boolean;
    add_events?: string[];
}

export class PaginatedListOfBranchDto implements IPaginatedListOfBranchDto {
    items?: BranchDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfBranchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BranchDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfBranchDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfBranchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfBranchDto {
    items?: BranchDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class BranchDto implements IBranchDto {
    name?: string;

    constructor(data?: IBranchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): BranchDto {
        data = typeof data === 'object' ? data : {};
        let result = new BranchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IBranchDto {
    name?: string;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}